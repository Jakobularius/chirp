# -*- coding: iso-8859-1 -*-
# -*- mode: python -*-
"""
script for splitting wav files into component elements

Copyright (C) 2012 Dan Meliza <dmeliza@gmail.com>
Created 2012-04-23
"""
from ..common.config import _configurable
from . import intervalsplit

_scriptname = "csplit"
_scriptdoc = """\

Usage: csplit [-c <config.cfg>] <signal.wav> <mask.ebl>

Extracts each element defined in <mask.ebl> from <signal.wav>,
outputting a new wave file for each element. See documentation for
configuration file details. """

class splitter(_configurable):
    """ Splits a recording into intervals """

    options = dict(time_ramp = 2,
                   boxmask = True,
                   merge_elements = False)
    config_sections = ('csplitter',)

    def splitfile(self, wavfile, lblfile):
        """
        Split the signal in <wavfile> into the elements in <lblfile>.
        Yields the extracted signals.
        """
        from ..common import audio, geom
        elems = geom.elementlist.read(lblfile)
        if self.options['merge_elements']:
            if self.options['boxmask']:
                elems = [elems.range]
            else:
                raise NotImplementedError, "merging polygons not implemented"
        
        with audio.wavfile(wavfile,'r') as fp:
            signal, Fs = fp.read(), fp.sampling_rate / 1000.
            for elem in elems:
                if self.options['boxmask'] or geom.elementlist.element_type(elem)=='interval':
                    yield intervalsplit.split(signal, elem, Fs, self.options['time_ramp'])
                else:
                    raise NotImplementedError, "polygon extraction not implemented"

    def options_str(self):
        out = """\
* Splitter parameters:
** Time smoothing = %(time_ramp).2f ms
** Boxmask polygons = %(boxmask)s
** Merge elements = %(merge_elements)s""" % self.options
        return out
                
def main(argv=None, cout=None, cerr=None, **kwargs):
    import sys
    from ..version import version
    if argv is None:
        argv = sys.argv[1:]
    if cout is None:
        cout = sys.stdout
    if cerr is None:
        cerr = sys.stderr

    import getopt
    from ..common.config import configoptions
    config = configoptions()

    opts,args = getopt.getopt(argv, 'hvc:')

    
    for o,a in opts:
        if o == '-h':
            print _scriptdoc
            return -1
        elif o == '-v':
            print " %s version %s" % (_scriptname, version)
            return -1
        elif o == '-c':
            config.read(a)
    if len(args) < 2:
        print _scriptdoc
        return -1

    print >> cout, "* Program: %s" % _scriptname
    print >> cout, "** Version: %s" % version
    print >> cout, "* Sound file: %s" % wavfile
    print >> cout, "* Mask file: %s" % maskfile

    splt = splitter(config)
    print >> cout, splt.options_str()

    wavfile, maskfile = args[:2]
    
# Variables:
# End:
